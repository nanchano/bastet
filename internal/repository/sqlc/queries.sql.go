// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
  name, description, category, location, publisher, lineup, start_ts, end_ts
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, name, description, category, location, publisher, lineup, start_ts, end_ts, created_at
`

type CreateEventParams struct {
	Name        string
	Description string
	Category    string
	Location    string
	Publisher   string
	Lineup      []string
	StartTS     time.Time
	EndTS       time.Time
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Location,
		arg.Publisher,
		arg.Lineup,
		arg.StartTS,
		arg.EndTS,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Location,
		&i.Publisher,
		&i.Lineup,
		&i.StartTS,
		&i.EndTS,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events
WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEvent, id)
	return err
}

const getEvent = `-- name: GetEvent :one
SELECT id, name, description, category, location, publisher, lineup, start_ts, end_ts, created_at FROM events
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEvent(ctx context.Context, id int64) (Event, error) {
	row := q.db.QueryRow(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Location,
		&i.Publisher,
		&i.Lineup,
		&i.StartTS,
		&i.EndTS,
		&i.CreatedAt,
	)
	return i, err
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events
SET
  name = COALESCE($1, name),
  description = COALESCE($2, description),
  category = COALESCE($3, category),
  location = COALESCE($4, location),
  publisher = COALESCE($5, publisher),
  lineup = COALESCE($6, lineup),
  start_ts = COALESCE($7, start_ts),
  end_ts = COALESCE($8, end_ts)
WHERE id = $9
RETURNING id, name, description, category, location, publisher, lineup, start_ts, end_ts, created_at
`

type UpdateEventParams struct {
	Name        sql.NullString
	Description sql.NullString
	Category    sql.NullString
	Location    sql.NullString
	Publisher   sql.NullString
	Lineup      []string
	StartTS     sql.NullTime
	EndTS       sql.NullTime
	ID          int64
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, updateEvent,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Location,
		arg.Publisher,
		arg.Lineup,
		arg.StartTS,
		arg.EndTS,
		arg.ID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Location,
		&i.Publisher,
		&i.Lineup,
		&i.StartTS,
		&i.EndTS,
		&i.CreatedAt,
	)
	return i, err
}
